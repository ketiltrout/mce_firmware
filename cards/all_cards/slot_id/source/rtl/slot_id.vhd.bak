-- slot_id.vhd
--
-- <revision control keyword substitutions e.g. $Id$>
--
-- Project:		SCUBA 2
-- Author:		jjacob
-- Organisation:	UBC Physics and Astronomy
--
-- Description:
-- This code implements the Slot ID functionality
--
-- Revision history:
-- <date $Date$>	-		<text>		- <initials $Author$>
--
------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

library work;
use work.slave_ctrl_pack.all;
use work.slot_id_pack.all;

--use OVLs in the near future

entity slot_id is
   port (
   
      slot_id_i : in std_logic_vector (3 downto 0);
   
   -- wishbone signals
      clk_i   : in std_logic;
      rst_i   : in std_logic;		
      dat_i 	 : in std_logic_vector (SLOT_ID_DATA_WIDTH-1 downto 0); -- not used since not writing to slot ID
      dat_o   : out std_logic_vector (SLOT_ID_DATA_WIDTH-1 downto 0);
      addr_i  : in std_logic_vector (SLOT_ID_ADDR_WIDTH-1 downto 0);
      we_i    : in std_logic;
      stb_i   : in std_logic;
      ack_o   : out std_logic; 
      cyc_i   : in std_logic
   );
end slot_id;

architecture rtl of slot_id is

-- internal signals
signal slot_id_reg       : std_logic_vector (3 downto 0);
signal slot_id_valid     : std_logic;
signal slot_id_wr_ready  : std_logic;

begin

------------------------------------------------------------------------
--
-- Read slot ID
--
------------------------------------------------------------------------

-- this is a simplified process, actual process might be more complex
   process (clk_i, rst_i)
   begin
      if rst_i = '1' then
         slot_id_reg <= "0000";
         slot_id_valid <= '0';
      elsif clk_i'event and clk_i = '1' then
         slot_id_reg <= slot_id_i;
         slot_id_valid <= '1';
      end if;     
   end process;
   
   slot_id_wr_ready <= '0'; -- never ready since can't write to slot ID
   
------------------------------------------------------------------------
--
-- Wishbone
--
------------------------------------------------------------------------ 

   dat_o <= "0000000000000000000000000000" & slot_id_reg;

   slot_id_slave_ctrl : slave_ctrl
   generic map(SLAVE_SEL   => SLOT_ID_SEL,  -- address mapping to 0x80000000
               ADDR_WIDTH  => SLOT_ID_ADDR_WIDTH)
   port map   (slave_wr_ready        => slot_id_wr_ready, -- can't write to the slot ID
               slave_rd_data_valid   => slot_id_valid,
               clk_i                 => clk_i,
               rst_i                 => rst_i,
               addr_i                => addr_i,
               we_i                  => we_i,
               stb_i                 => stb_i,
               cyc_i                 => cyc_i,
               ack_o                 => ack_o);
  

end rtl;
