-- Generated by altmemphy 8.1 [Altera, IP Toolbench 1.3.0 Build 163]
-- ************************************************************
-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
-- ************************************************************
-- Copyright (C) 1991-2008 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.

component micron_ctrl_phy
	PORT (
		pll_ref_clk	: IN STD_LOGIC;
		global_reset_n	: IN STD_LOGIC;
		soft_reset_n	: IN STD_LOGIC;
		local_address	: IN STD_LOGIC_VECTOR (22 DOWNTO 0);
		local_read_req	: IN STD_LOGIC;
		local_wdata	: IN STD_LOGIC_VECTOR (63 DOWNTO 0);
		local_write_req	: IN STD_LOGIC;
		local_size	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		local_be	: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		local_refresh_req	: IN STD_LOGIC;
		local_burstbegin	: IN STD_LOGIC;
		ctl_ready	: IN STD_LOGIC;
		ctl_wdata_req	: IN STD_LOGIC;
		ctl_rdata	: IN STD_LOGIC_VECTOR (63 DOWNTO 0);
		ctl_rdata_valid	: IN STD_LOGIC;
		ctl_refresh_ack	: IN STD_LOGIC;
		ctl_mem_addr_h	: IN STD_LOGIC_VECTOR (12 DOWNTO 0);
		ctl_mem_addr_l	: IN STD_LOGIC_VECTOR (12 DOWNTO 0);
		ctl_mem_ba_h	: IN STD_LOGIC_VECTOR (1 DOWNTO 0);
		ctl_mem_ba_l	: IN STD_LOGIC_VECTOR (1 DOWNTO 0);
		ctl_mem_cas_n_h	: IN STD_LOGIC;
		ctl_mem_cas_n_l	: IN STD_LOGIC;
		ctl_mem_cke_h	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_mem_cke_l	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_mem_cs_n_h	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_mem_cs_n_l	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_mem_odt_h	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_mem_odt_l	: IN STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_mem_ras_n_h	: IN STD_LOGIC;
		ctl_mem_ras_n_l	: IN STD_LOGIC;
		ctl_mem_we_n_h	: IN STD_LOGIC;
		ctl_mem_we_n_l	: IN STD_LOGIC;
		ctl_mem_be	: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		ctl_mem_dqs_burst	: IN STD_LOGIC;
		ctl_mem_wdata	: IN STD_LOGIC_VECTOR (63 DOWNTO 0);
		ctl_mem_wdata_valid	: IN STD_LOGIC;
		ctl_init_done	: IN STD_LOGIC;
		ctl_doing_rd	: IN STD_LOGIC;
		ctl_add_1t_ac_lat	: IN STD_LOGIC;
		ctl_add_1t_odt_lat	: IN STD_LOGIC;
		ctl_add_intermediate_regs	: IN STD_LOGIC;
		ctl_negedge_en	: IN STD_LOGIC;
		dqs_delay_ctrl_import	: IN STD_LOGIC_VECTOR (5 DOWNTO 0);
		pll_reconfig_enable	: IN STD_LOGIC;
		pll_reconfig_counter_type	: IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		pll_reconfig_counter_param	: IN STD_LOGIC_VECTOR (2 DOWNTO 0);
		pll_reconfig_data_in	: IN STD_LOGIC_VECTOR (8 DOWNTO 0);
		pll_reconfig_read_param	: IN STD_LOGIC;
		pll_reconfig_write_param	: IN STD_LOGIC;
		pll_reconfig	: IN STD_LOGIC;
		oct_ctl_rs_value	: IN STD_LOGIC_VECTOR (13 DOWNTO 0);
		oct_ctl_rt_value	: IN STD_LOGIC_VECTOR (13 DOWNTO 0);
		local_autopch_req	: IN STD_LOGIC;
		local_powerdn_req	: IN STD_LOGIC;
		local_self_rfsh_req	: IN STD_LOGIC;
		ctl_self_rfsh_ack	: IN STD_LOGIC;
		ctl_powerdn_ack	: IN STD_LOGIC;
		reset_request_n	: OUT STD_LOGIC;
		phy_clk	: OUT STD_LOGIC;
		reset_phy_clk_n	: OUT STD_LOGIC;
		aux_half_rate_clk	: OUT STD_LOGIC;
		aux_full_rate_clk	: OUT STD_LOGIC;
		local_ready	: OUT STD_LOGIC;
		local_rdata	: OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
		local_rdata_valid	: OUT STD_LOGIC;
		local_init_done	: OUT STD_LOGIC;
		local_refresh_ack	: OUT STD_LOGIC;
		local_wdata_req	: OUT STD_LOGIC;
		ctl_address	: OUT STD_LOGIC_VECTOR (22 DOWNTO 0);
		ctl_read_req	: OUT STD_LOGIC;
		ctl_wdata	: OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
		ctl_write_req	: OUT STD_LOGIC;
		ctl_size	: OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
		ctl_be	: OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		ctl_refresh_req	: OUT STD_LOGIC;
		ctl_burstbegin	: OUT STD_LOGIC;
		ctl_mem_rdata	: OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
		ctl_mem_rdata_valid	: OUT STD_LOGIC;
		ctl_rlat	: OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
		ctl_usr_mode_rdy	: OUT STD_LOGIC;
		mem_addr	: OUT STD_LOGIC_VECTOR (12 DOWNTO 0);
		mem_ba	: OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
		mem_cas_n	: OUT STD_LOGIC;
		mem_cke	: OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
		mem_cs_n	: OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
		mem_dm	: OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
		mem_odt	: OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
		mem_ras_n	: OUT STD_LOGIC;
		mem_we_n	: OUT STD_LOGIC;
		mem_reset_n	: OUT STD_LOGIC;
		resynchronisation_successful	: OUT STD_LOGIC;
		postamble_successful	: OUT STD_LOGIC;
		tracking_successful	: OUT STD_LOGIC;
		tracking_adjustment_up	: OUT STD_LOGIC;
		tracking_adjustment_down	: OUT STD_LOGIC;
		dqs_delay_ctrl_export	: OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
		dll_reference_clk	: OUT STD_LOGIC;
		pll_reconfig_clk	: OUT STD_LOGIC;
		pll_reconfig_reset	: OUT STD_LOGIC;
		pll_reconfig_data_out	: OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
		pll_reconfig_busy	: OUT STD_LOGIC;
		local_self_rfsh_ack	: OUT STD_LOGIC;
		local_powerdn_ack	: OUT STD_LOGIC;
		ctl_autopch_req	: OUT STD_LOGIC;
		ctl_powerdn_req	: OUT STD_LOGIC;
		ctl_self_rfsh_req	: OUT STD_LOGIC;
		mem_clk	: INOUT STD_LOGIC_VECTOR (0 DOWNTO 0);
		mem_clk_n	: INOUT STD_LOGIC_VECTOR (0 DOWNTO 0);
		mem_dq	: INOUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		mem_dqs	: INOUT STD_LOGIC_VECTOR (1 DOWNTO 0);
		mem_dqsn	: INOUT STD_LOGIC_VECTOR (1 DOWNTO 0)
	);
end component;
