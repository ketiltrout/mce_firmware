<date $Date$>	- <initials $Author$>
$Log$

Assumptions for Address card DAC controller:
--------------------------------------------
1. Any given row selection order issued by the clock card is valid. We decided 
on May 5th that the clock card validates a row selction order and passes it to
address card only if it is legitimate. In practice, the bus scheme implemented
in the actual board prohibits certain row selection orders.

2. On values and off values can be written regardless of whether mux is running 
or not.But initially the row_cycle FSM starts running only after start_mux cmd
is received.

3. Memory required for this block: 256x16b:
   on/off values: 41 x 16b x 2 +
   enable       : 41 x 16b     +
   order        : 41 x 16b     +
   Mux on/off   : 1  x 16b
   ---------------------------------
                  165 x 16b
The smallest memory block that we can use is then 256x16b or one of 1M4K blocks 
in Stratix.
   
4. In NIST, each DAC has its own data bus and each bus is 14b. In our design  4 DACs
share the same data bus and each bus is 14b.

5. Array data available at 20kHz which translates to 50us. 50us/41 = 1.22us per row.
At the end of 1.22us, all DACs have their off values and the selected DAC has its on 
value.

The settling time is 360ns, leaving 860ns for sampling from readout cards at 50MHz.

5. Here are the list of commands that ac_dac_ctrl would process:
OnBias		R/W	each on value is stored as a 16b value in memory, but sent down the WB as 32b value.
OffBias		R/W	each off value is stored as a 16b value in memory, but sent down the WB as 32b value.
Enable/Disable	R/W	not in the BBISA list, May 5th Bryce wants to add it, July 6h Bryce is going to investigate whether we need this command.

RowSelection	R/W	
Active Row  	R/W
Row Map 	R/W
DAC Swith Delay	R/W	July 6th, We may add this command to BBISA, value 0-8	

6. July 6th, we decided to parameterize 41 to NUM_OF_ROWS and have a barebone 
functionality going for August Cardiff delivery, barebone functioanlity consists 
of putting an on value on the DACs and having a fixed row_selection_order that 
is hard-coded in ac_dac_ctrl_pack.vhd

7. Talked to Carl from NIST in Colorado, he mentioned that they could have 
overlapping biases. In NIST system, 4 D/As are multiplexed.(0, 2, 4, 6) and 
(1, 3, 5, 7).

They have 3 adjustable parameters: DELAY, WIDTH, on/off level. The DELAY is the
number of clock cycles from Sync pulse till the high value is put on DAC and then
the DAC would stay on for WIDTH number of clock cycles. They didn't do any range 
checking to see whether the user has entered valid values. They experienced 40x20ns 
= 800ns settling time and the Delay between 0 to 40ns. 

The frame rate was always the same in NIST hardware and they had an enable row 
feature to decide whether they'll output a DAC value for that DAC or not.

Since the DAC data is only 14 bits, NIST uses the other 2 bits out of 14 bits 









